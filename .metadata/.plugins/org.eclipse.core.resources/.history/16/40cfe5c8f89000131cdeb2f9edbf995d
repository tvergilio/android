package com.example.googleitdb;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.Set;

import android.app.Activity;
import android.app.ListActivity;
import android.content.SharedPreferences;
import android.database.Cursor;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.Color;
import android.os.Bundle;
import android.os.CountDownTimer;
import android.os.Handler;
import android.view.Menu;
import android.view.View;
import android.widget.AbsListView;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

public class MainActivity extends ListActivity {
	private static final String DEBUG_TAG = "MainActivity";
	private TextView serviceTextMain;
	private String wordName;
	private int wordID;
	private TextView score;
	private int points;
	private Map<String, Integer> resultPoints;
	private ArrayAdapter<String> adapter;
	public static final int RESULTS_MAX = 8;
	public static final int LOW = 1;
	public static final int HIGH = 1000; // 2260 number of word names in the
										// names.xml resource
	public static final String TABLE_NAME = "table_word";
	public static final int POINTS_FIRST = 10;
	public static final int POINTS_SECOND = 7;
	public static final int POINTS_THIRD = 5;
	public static final int POINTS_FOURTH = 3;
	public static final int POINTS_FIFTH = 0;

	SQLiteDatabase db;
	DatabaseHelper myDbHelper;

	private int pointsJustEarned;
	private CountDownTimer countdownTimer;
	private boolean timerHasStarted = false;
	private TextView timerView;
	private final long startTime = 10 * 1000;
	private final long interval = 1 * 100;

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		List<String> result = new ArrayList<String>();
		resultPoints = new HashMap<String, Integer>();
		score = (TextView) findViewById(R.id.score);
		setScore(points);
		adapter = new ArrayAdapter<String>(this,
				android.R.layout.simple_list_item_1, result);
		getListView().setAdapter(adapter);
		getListView().setTextFilterEnabled(true);
		serviceTextMain = (TextView) findViewById(R.id.service_text_main);
		timerView = (TextView) findViewById(R.id.timer);
		countdownTimer = new CountDownTimer(startTime, interval) {

			@Override
			public void onFinish() {
				timerView.setText("time's up!");
				timerHasStarted = false;
			}

			@Override
			public void onTick(long millisUntilFinished) {
				timerView.setText("time: "
						+ (int) (long) millisUntilFinished / 100);

			}

		};

		myDbHelper = new DatabaseHelper(this);
		try {
			myDbHelper.createDataBase();
			myDbHelper.openDataBase();

		} catch (IOException ioe) {
			throw new Error("Unable to create database");
		} catch (SQLException sqle) {
			throw new Error("SQL Exception");
		}

	}

	@Override
	protected void onListItemClick(ListView l, View v, int position, long id) {
		super.onListItemClick(l, v, position, id);
		// check if time has elapsed
		if (!timerHasStarted) {
			return;
		}
		Object o = adapter.getItem(position);
		String item = o.toString();
		if (!resultPoints.isEmpty()) {
			String pointsFromTime = String.valueOf(timerView.getText());
			pointsFromTime = pointsFromTime.substring("time: ".length());
			int pointsToAdd = Integer.valueOf(pointsFromTime);
			pointsJustEarned = resultPoints.get(item) * pointsToAdd;
			points += pointsJustEarned;
			setScore(points);
			stopTimer();
			final Toast toast = Toast.makeText(this, "You've earned "
					+ pointsJustEarned + " points.", Toast.LENGTH_SHORT);
			toast.show();
			showAnswerValues(l);
		}
	}

	private void showAnswerValues(ListView l) {
		int childCount = l.getChildCount();
		for (int i = 0; i < childCount; i++) {
			View v = l.getChildAt(i);		
			Integer answerPoints = 0;
			if (v instanceof TextView) {
				TextView textView = (TextView) v;
				answerPoints = resultPoints.get(textView.getText());
				
				if (answerPoints.equals(POINTS_FIRST)){
					v.setBackgroundColor(Color.parseColor("green"));
					textView.setText(textView.getText() + " :D");
				} else if (answerPoints.equals(POINTS_SECOND)){
					v.setBackgroundColor(Color.parseColor("green");
					textView.setText(textView.getText() + " :D");
				}
				
				

			}
			
		}
		
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.main, menu);
		return true;
	}

	@Override
	protected void onPause() {
		super.onPause();
		if (wordName != null && adapter != null && !adapter.isEmpty()) {
			SharedPreferences sharedPref = getSharedPreferences(
					getString(R.string.preference_file_key), MODE_PRIVATE);
			SharedPreferences.Editor editor = sharedPref.edit();
			editor.putString(getString(R.string.saved_word_name), wordName);
			HashSet<String> resultsToPersist = new HashSet<String>();
			for (int i = 0; i < adapter.getCount(); i++) {
				resultsToPersist.add(adapter.getItem(i));
			}
			editor.putStringSet(getString(R.string.saved_word_suggestions),
					resultsToPersist);
			editor.putInt(getString(R.string.saved_points), points);
			editor.commit();
		}
	}

	@Override
	protected void onResume() {
		super.onResume();
		SharedPreferences sharedPref = getSharedPreferences(
				getString(R.string.preference_file_key), MODE_PRIVATE);
		wordName = sharedPref.getString(getString(R.string.saved_word_name),
				wordName);
		Set<String> resultsPersisted = sharedPref.getStringSet(
				getString(R.string.saved_word_suggestions), null);
		if (resultsPersisted != null) {
			adapter.clear();
			adapter.addAll(new ArrayList<String>(resultsPersisted));
			adapter.notifyDataSetChanged();
		}
		points = sharedPref.getInt(getString(R.string.saved_points), points);
		setScore(points);
	}

	public void buttonActivity(View view) {
		// this will never be here after, just using it to populate the
		// database.
		//myDbHelper.populateDBInitial();
		stopTimer();
		timerView.setText(R.string.timer);
		getNextWord();
		clearListViewColours();
	}


	private void clearListViewColours() {
		ListView l = getListView();
		for (int i = 0; i < l.getChildCount(); i++) {
			View v = l.getChildAt(i);
			v.setBackgroundColor(Color.TRANSPARENT);
		}
	}

	private void getNextWord() {
		wordID = getRandomID(HIGH, LOW);

		String[] selectionArgs = { String.valueOf(wordID) };

		Cursor c = myDbHelper.rawQuery("select * from " + TABLE_NAME
				+ " where CAST(_id AS TEXT) = ?", selectionArgs);

		if (c.moveToFirst()) {
			wordName = c.getString(1);
			serviceTextMain.setText(wordName);
			resultPoints.clear();
			resultPoints.put(c.getString(2), POINTS_FIRST);
			resultPoints.put(c.getString(3), POINTS_SECOND);
			resultPoints.put(c.getString(4), POINTS_THIRD);
			resultPoints.put(c.getString(5), POINTS_FOURTH);
			resultPoints.put(c.getString(6), POINTS_FIFTH);
			populateResultsList();
			startTimer();

		} else {
			getNextWord();
		}
	}

	private void startTimer() {		
		countdownTimer.start();
		timerHasStarted = true;
	}
	

	private void stopTimer() {
		countdownTimer.cancel();
		timerHasStarted = false;		
	}

	private void populateResultsList() {
		adapter.clear();
		// clone resultPoints
		Map<String, Integer> clone = new HashMap<String, Integer>();
		for (String key : resultPoints.keySet()) {
			clone.put(key, resultPoints.get(key));
		}
		while (!clone.isEmpty()) {
			int index = clone.size() == 1 ? 0
					: getRandomID(clone.size() - 1, 0);
			Object[] keys = clone.keySet().toArray();
			String key = (String) keys[index];
			adapter.add(key);
			clone.remove(key);
		}

		// adapter.clear();
		// adapter.addAll(result);
		adapter.notifyDataSetChanged();
		

	}

	private int getRandomID(int high, int low) {
		Random r = new Random();
		return r.nextInt(high - low) + low;
	}

	private void setScore(int points) {
		score.setText("score: " + String.valueOf(points));
	}

}
