package com.tvergilio.googleit;

import java.util.ArrayList;

import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.database.sqlite.SQLiteStatement;
import android.util.Log;

/**
 * A data access object for persisting and retrieving word data. This uses a
 * SQLite database for persistence and retrieval.
 * 
 */
public class WordDb {
	private static final String TAG = "WordDb";
	// database metadata
	private static final String DB_NAME = "words.db";
	private static final int DB_VERSION = 1;

	private static final String TABLE_NAME = "word";

	// column names
	private static final String NAME = "name";
	private static final String ID = "id";
	private static final String FIRST_SUGGESTION = "first_suggestion";
	private static final String SECOND_SUGGESTION = "second_suggestion";
	private static final String THIRD_SUGGESTION = "third_suggestion";

	// SQL statements
	private static final String CREATE_TABLE = "CREATE TABLE " + TABLE_NAME
			+ " (" + ID + " INTEGER PRIMARY KEY, " + NAME + " TEXT, "
			+ FIRST_SUGGESTION + " TEXT, " + SECOND_SUGGESTION + " TEXT, "
			+ THIRD_SUGGESTION + " TEXT)";
	private static final String INSERT_SQL = "INSERT INTO " + TABLE_NAME + " ("
			+ NAME + ", " + FIRST_SUGGESTION + "," + SECOND_SUGGESTION + ","
			+ THIRD_SUGGESTION + ",) " + "VALUES (?,?,?,?,?,?,?)";
	private static final String READ_SQL = "SELECT " + ID + ", " + NAME + ", "
			+ FIRST_SUGGESTION + ", " + SECOND_SUGGESTION + ", "
			+ THIRD_SUGGESTION + "" + " FROM " + TABLE_NAME;
	private static final String UPDATE_SQL = "UPDATE " + TABLE_NAME + " SET "
			+ FIRST_SUGGESTION + "=?, " + SECOND_SUGGESTION + "=?, "
			+ THIRD_SUGGESTION + "=? WHERE " + ID + "=?";

	// The Context object that created this WordDb
	private final Context context;
	private final SQLiteOpenHelper helper;
	private SQLiteStatement stmt;
	private SQLiteStatement updateStmt;
	private final SQLiteDatabase db;

	/**
	 * Constructor that takes a <code>Context</code> object, usually the
	 * <code>Service</code> or <code>Activity</code> that created this instance.
	 * This will initialize the SQLiteOpenHelper used for the database, and
	 * pre-compile the insert and update SQL statements.
	 * 
	 * @param ctx
	 *            The <code>Context</code> that created this instance
	 */
	public WordDb(Context ctx) {
		context = ctx;

		// initialize the database helper
		helper = new SQLiteOpenHelper(context, DB_NAME, null, DB_VERSION) {
			@Override
			public void onCreate(SQLiteDatabase db) {
				db.execSQL(CREATE_TABLE);
				Log.d(TAG, "Created table: \n" + CREATE_TABLE);
			}

			@Override
			public void onUpgrade(SQLiteDatabase db, int oldVersion,
					int newVersion) {
				throw new UnsupportedOperationException();
			}
		};

		// open the database
		db = helper.getWritableDatabase();

		// pre-compile statements
		stmt = db.compileStatement(INSERT_SQL);
		updateStmt = db.compileStatement(UPDATE_SQL);
	}

	/**
	 * Saves a <code>Word</code> to the database.
	 * 
	 * @param word
	 *            A <code>Word</code> instance that will be added to the
	 *            database.
	 * @return A <code>Word</code> instance with its data refreshed from the
	 *         database, including its database-assigned ID.
	 */
	public Word addWord(Word word) {
		Log.d(TAG, "Adding word to db, word=" + word);
		stmt.bindString(1, word.getName());
		stmt.bindString(2, word.getFirstSuggestion());
		stmt.bindString(3, word.getSecondSuggestion());
		stmt.bindString(4, word.getThirdSuggestion());
		int id = (int) stmt.executeInsert();
		return new Word(word, id);
	}

	/**
	 * Updates the current suggestions of a <code>Word</code> stored in the
	 * database.
	 * 
	 * @param word
	 *            The <code>Word</code> being updated.
	 */
	public void updateWordSuggestions(Word word) {
		Log.d(TAG, "Updating word suggestions in DB word=" + word.toString());
		updateStmt.bindString(1, word.getFirstSuggestion());
		updateStmt.bindString(2, word.getSecondSuggestion());
		updateStmt.bindString(3, word.getThirdSuggestion());
		updateStmt.bindLong(2, word.getId());
		updateStmt.execute();
	}

	/**
	 * Retrieve all of the <code>Word</code>s stored in the database.
	 * 
	 * @return List of all of the Words stored in the database.
	 */
	public ArrayList<Word> getWords() {
		Log.d(TAG, "Getting words form DB");
		Cursor results = db.rawQuery(READ_SQL, null);
		ArrayList<Word> words = new ArrayList<Word>(results.getCount());
		if (results.moveToFirst()) {
			int idCol = results.getColumnIndex(ID);
			int nameCol = results.getColumnIndex(NAME);
			int firstSuggestionCol = results.getColumnIndex(FIRST_SUGGESTION);
			int secondSuggestionCol = results.getColumnIndex(SECOND_SUGGESTION);
			int thirdSuggestionCol = results.getColumnIndex(THIRD_SUGGESTION);

			do {
				Word word = new Word(results.getString(nameCol),
						results.getString(firstSuggestionCol),
						results.getString(secondSuggestionCol),
						results.getString(thirdSuggestionCol));
				Log.d(TAG, "Word from db = " + word.toString());
				words.add(word);
			} while (results.moveToNext());
		}
		if (!results.isClosed()) {
			results.close();
		}
		return words;
	}

	/**
	 * Method to close the underlying database connection.
	 */
	public void close() {
		helper.close();
	}
}