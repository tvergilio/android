package com.example.googleitdb;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.Set;

import com.hipmob.gifanimationdrawable.GifAnimationDrawable;

import android.app.ListActivity;
import android.content.Context;
import android.content.SharedPreferences;
import android.database.Cursor;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.ColorFilter;
import android.graphics.Movie;
import android.graphics.drawable.AnimationDrawable;
import android.graphics.drawable.GradientDrawable;
import android.os.Bundle;
import android.os.CountDownTimer;
import android.view.Gravity;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.widget.ArrayAdapter;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

public class MainActivity extends ListActivity {

	private TextView mWordNameView;
	private TextView mScoreView;
	private TextView mTimerView;
	private TextView mResultView;
	private TextView mResultPointsEarned;
	private LinearLayout mResultLayout;
	private GradientDrawable mGreenGradientDrawable;
	private GradientDrawable mRedGradientDrawable;
	private GradientDrawable mAmberGradientDrawable;
	private int wordID;
	private String wordName;
	private ArrayAdapter<String> adapter;
	private int points;
	private Map<String, Integer> resultPoints;
	private int pointsJustEarned;
	private CountDownTimer countdownTimer;
	private boolean timerHasStarted = false;
	private final long startTime = 10 * 1000;
	private final long interval = 1 * 100;
	public static final int RESULTS_MAX = 8;
	public static final int LOW = 1;
	public static final int HIGH_WORDS = 1000; // 2260 number of word names in
												// the
												// names.xml resource
	public static final int HIGH_FORENAMES = 476;
	public static final int HIGH_SENTENCES = 454;
	public static final int POINTS_FIRST = 10;
	public static final int POINTS_SECOND = 7;
	public static final int POINTS_THIRD = 5;
	public static final int POINTS_FOURTH = 3;
	public static final int POINTS_FIFTH = 0;
	SQLiteDatabase db;
	DatabaseHelper myDbHelper;
	private String tableName;

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		List<String> result = new ArrayList<String>();
		resultPoints = new HashMap<String, Integer>();
		mScoreView = (TextView) findViewById(R.id.score);
		mResultLayout = (LinearLayout) findViewById(R.id.result_layout);
		mResultView = (TextView) findViewById(R.id.result_text);
		mResultPointsEarned = (TextView) findViewById(R.id.result_points_earned);
		adapter = new ArrayAdapter<String>(this,
				android.R.layout.simple_list_item_1, result);
		getListView().setAdapter(adapter);
		getListView().setTextFilterEnabled(true);
		mWordNameView = (TextView) findViewById(R.id.service_text_main);
		mTimerView = (TextView) findViewById(R.id.timer);
		countdownTimer = new CountDownTimer(startTime, interval) {

			@Override
			public void onFinish() {
				mTimerView.setText("time's up!");
				timerHasStarted = false;
			}

			@Override
			public void onTick(long millisUntilFinished) {
				mTimerView.setText("time: " + (int) (long) millisUntilFinished
						/ 100);
			}
		};
		tableName = DatabaseHelper.TABLE_NAME_SENTENCE;
		createBackgroundDrawables();
		connectToDatabase(DatabaseHelper.DB_NAME_UK,
				DatabaseHelper.RESOURCE_PREFIX_SENTENCES);
		newGame();
	}

	private void createBackgroundDrawables() {
		mGreenGradientDrawable = new GradientDrawable(
				GradientDrawable.Orientation.TOP_BOTTOM, new int[] {
						getResources().getColor(R.color.light_jade),
						getResources().getColor(R.color.green_apple) });
		mGreenGradientDrawable.setCornerRadius(0f);
		mRedGradientDrawable = new GradientDrawable(
				GradientDrawable.Orientation.TOP_BOTTOM, new int[] {
						getResources().getColor(R.color.deep_peach),
						getResources().getColor(R.color.red) });
		mRedGradientDrawable.setCornerRadius(0f);
		mAmberGradientDrawable = new GradientDrawable(
				GradientDrawable.Orientation.TOP_BOTTOM, new int[] {
						getResources().getColor(R.color.parchment),
						getResources().getColor(R.color.bee_yellow) });
		mAmberGradientDrawable.setCornerRadius(0f);
	}

	private void connectToDatabase(String dbName, String resourcePrefix)
			throws Error {
		myDbHelper = new DatabaseHelper(this, dbName, resourcePrefix);
		try {
			myDbHelper.createDataBase();
			myDbHelper.openDataBase();

		} catch (IOException ioe) {
			throw new Error("Unable to create database");
		} catch (SQLException sqle) {
			throw new Error("SQL Exception");
		}
	}

	@Override
	protected void onListItemClick(ListView l, View v, int position, long id) {
		super.onListItemClick(l, v, position, id);
		// check if time has elapsed
		if (!timerHasStarted) {
			return;
		}
		Object o = adapter.getItem(position);
		String item = o.toString();
		if (!resultPoints.isEmpty()) {
			String pointsFromTime = String.valueOf(mTimerView.getText());
			pointsFromTime = pointsFromTime.substring("time: ".length());
			int pointsToAdd = Integer.valueOf(pointsFromTime);
			pointsJustEarned = resultPoints.get(item) * pointsToAdd;
			points += pointsJustEarned;
			setScore(points);
			stopTimer();
			//makeToast("You've earned " + pointsJustEarned + " points.");
			showAnswerValues(l, v);
		}
	}

	private void showAnswerValues(ListView l, View v) {
		Integer answerPoints = 0;

		if (v instanceof TextView) {
			TextView textView = (TextView) v;
			AnimationDrawable drawable = null;
			answerPoints = resultPoints.get(textView.getText());			
//			try {
//				drawable = new GifAnimationDrawable(new File("/res/drawable-hdpi/geezer.gif"));
//			} catch (IOException e) {
//				// TODO Auto-generated catch block
//				e.printStackTrace();
//			}

			if (answerPoints.equals(POINTS_FIRST)) {
				mResultLayout.setBackground(mGreenGradientDrawable);
				//mResultView.setText(getString(R.string.result_first));
				mResultView.setBackground(drawable);
				drawable.start();

			} else if (answerPoints.equals(POINTS_SECOND)) {
				mResultLayout.setBackground(mAmberGradientDrawable);
				mResultView.setText(getString(R.string.result_second));

			} else if (answerPoints.equals(POINTS_THIRD)) {
				mResultLayout.setBackground(mAmberGradientDrawable);
				mResultView.setText(getString(R.string.result_third));

			} else if (answerPoints.equals(POINTS_FOURTH)) {
				mResultLayout.setBackground(mAmberGradientDrawable);
				mResultView.setText(getString(R.string.result_fourth));

			} else if (answerPoints.equals(POINTS_FIFTH)) {
				mResultLayout.setBackground(mRedGradientDrawable);
				mResultView.setText(getString(R.string.result_fifth));

			}
			v.setBackgroundColor(getResources().getColor(R.color.saffron));
			mResultPointsEarned.setText("+ " + answerPoints + " points");
			mResultLayout.setVisibility(View.VISIBLE);
			mResultView.setVisibility(View.VISIBLE);
		}
	}

	private void makeToast(String text) {
		Toast toast = Toast.makeText(this, text, Toast.LENGTH_SHORT);
		toast.setGravity(Gravity.TOP, 100, 0);
		toast.show();
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		MenuInflater inflater = getMenuInflater();
		inflater.inflate(R.menu.main, menu);
		inflater.inflate(R.menu.game_menu, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		switch (item.getItemId()) {
		case R.id.new_game:
			tableName = DatabaseHelper.TABLE_NAME_WORD;
			newGame();
			return true;
		case R.id.new_game_forename:
			tableName = DatabaseHelper.TABLE_NAME_FORENAME;
			newGame();
			return true;
		case R.id.help:
			showHelp();
			return true;
		default:
			return super.onOptionsItemSelected(item);
		}
	}

	private void showHelp() {
		// TODO Auto-generated method stub
	}

	private void newGame() {
		points = 0;
		mWordNameView.setText("");
		mResultLayout.setVisibility(View.INVISIBLE);
		setScore(points);
		adapter.clear();
		stopTimer();
	}

	@Override
	protected void onPause() {
		super.onPause();
		if (wordName != null && adapter != null && !adapter.isEmpty()) {
			SharedPreferences sharedPref = getSharedPreferences(
					getString(R.string.preference_file_key), MODE_PRIVATE);
			SharedPreferences.Editor editor = sharedPref.edit();
			editor.putString(getString(R.string.saved_word_name), wordName);
			HashSet<String> resultsToPersist = new HashSet<String>();
			for (int i = 0; i < adapter.getCount(); i++) {
				resultsToPersist.add(adapter.getItem(i));
			}
			editor.putStringSet(getString(R.string.saved_word_suggestions),
					resultsToPersist);
			editor.putInt(getString(R.string.saved_points), points);
			editor.commit();
		}
	}

	@Override
	protected void onResume() {
		super.onResume();
		SharedPreferences sharedPref = getSharedPreferences(
				getString(R.string.preference_file_key), MODE_PRIVATE);
		wordName = sharedPref.getString(getString(R.string.saved_word_name),
				wordName);
		Set<String> resultsPersisted = sharedPref.getStringSet(
				getString(R.string.saved_word_suggestions), null);
		if (resultsPersisted != null) {
			adapter.clear();
			adapter.addAll(new ArrayList<String>(resultsPersisted));
			adapter.notifyDataSetChanged();
		}
		mWordNameView.setText(wordName);
		points = sharedPref.getInt(getString(R.string.saved_points), points);
		setScore(points);
	}

	public void buttonActivity(View view) {
		// this will never be here after, just using it to populate the
		// database.
		// myDbHelper.populateDBInitial();
		stopTimer();
		mTimerView.setText(R.string.timer);
		mResultLayout.setVisibility(View.INVISIBLE);
		getNextWord();
		clearListViewColours();
	}

	private void clearListViewColours() {
		ListView l = getListView();
		for (int i = 0; i < l.getChildCount(); i++) {
			View v = l.getChildAt(i);
			v.setBackgroundColor(Color.TRANSPARENT);
		}
	}

	private void getNextWord() {
		int high = 0;

		if (tableName.equals(DatabaseHelper.TABLE_NAME_WORD)) {
			high = HIGH_WORDS;
		} else if (tableName.equals(DatabaseHelper.TABLE_NAME_FORENAME)) {
			high = HIGH_FORENAMES;
		} else if (tableName.equals(DatabaseHelper.TABLE_NAME_SENTENCE)) {
			high = HIGH_SENTENCES;
		} else {
			return;
		}
		wordID = getRandomID(high, LOW);

		String[] selectionArgs = { String.valueOf(wordID) };

		Cursor c = myDbHelper.rawQuery("select * from " + tableName
				+ " where CAST(_id AS TEXT) = ?", selectionArgs);

		if (c.moveToFirst()) {
			wordName = c.getString(1);
			mWordNameView.setText(wordName);
			resultPoints.clear();
			resultPoints.put(c.getString(2), POINTS_FIRST);
			resultPoints.put(c.getString(3), POINTS_SECOND);
			resultPoints.put(c.getString(4), POINTS_THIRD);
			resultPoints.put(c.getString(5), POINTS_FOURTH);
			resultPoints.put(c.getString(6), POINTS_FIFTH);
			populateResultsList();
			startTimer();

		} else {
			getNextWord();
		}
	}

	private void startTimer() {
		countdownTimer.start();
		timerHasStarted = true;
	}

	private void stopTimer() {
		countdownTimer.cancel();
		timerHasStarted = false;
	}

	private void populateResultsList() {
		adapter.clear();
		// clone resultPoints
		Map<String, Integer> clone = new HashMap<String, Integer>();
		for (String key : resultPoints.keySet()) {
			clone.put(key, resultPoints.get(key));
		}
		while (!clone.isEmpty()) {
			int index = clone.size() == 1 ? 0
					: getRandomID(clone.size() - 1, 0);
			Object[] keys = clone.keySet().toArray();
			String key = (String) keys[index];
			adapter.add(key);
			clone.remove(key);
		}

		adapter.notifyDataSetChanged();

	}

	private int getRandomID(int high, int low) {
		Random r = new Random();
		return r.nextInt(high - low) + low;
	}

	private void setScore(int points) {
		mScoreView.setText("score: " + String.valueOf(points));
	}
	
	
}
